---
import fs from "node:fs";
import "photoswipe/style.css";

const photosPath = "./public/photos";
const allImages = fs
    .readdirSync(photosPath)
    .filter((file) => /\.(jpg|jpeg|png|webp)$/i.test(file))
    .sort();

// Get first 6 images for the gallery preview
const visibleImages = allImages.slice(0, 6);
const remainingImages = allImages.slice(6);
const remainingCount = Math.max(0, allImages.length - 6);
---

<div class="gallery-container">
    <div class="columns-2 gap-4 container mx-auto lg:columns-4 md:columns-3">
        {
            visibleImages.map((imageName, index) => (
                <div class="mb-4 break-inside-avoid relative">
                    <a
                        href={`/photos/${imageName}`}
                        class="gallery-item block overflow-hidden rounded-lg shadow hover:shadow-md transition-transform duration-200 hover:scale-[1.03] cursor-pointer"
                        data-pswp-index={index}
                    >
                        <img
                            src={`/photos/${imageName}`}
                            alt={imageName.split(".")[0]}
                            class="w-full h-auto object-cover"
                            loading="lazy"
                        />
                        {index === 5 && remainingCount > 0 && (
                            <div class="absolute inset-0 bg-gray-500 bg-opacity-50 flex items-center justify-center rounded-lg">
                                <span class="text-white text-xl font-bold">+{remainingCount} mehr</span>
                            </div>
                        )}
                    </a>
                </div>
            ))
        }
    </div>

    <!-- Hidden container for remaining images -->
    <div class="hidden">
        {
            remainingImages.map((imageName, index) => (
                <a
                    href={`/photos/${imageName}`}
                    class="gallery-item"
                    data-pswp-index={index + 6}
                >
                    <img
                        src={`/photos/${imageName}`}
                        alt={imageName.split(".")[0]}
                        loading="lazy"
                    />
                </a>
            ))
        }
    </div>
</div>

<script>
    window.addEventListener("load", async () => {
        const PhotoSwipeLightbox = (await import("photoswipe/lightbox"))
            .default;
        const PhotoSwipe = (await import("photoswipe")).default;

        // Function to set image dimensions
        function setImageDimensions(item) {
            const img = item.querySelector("img");
            
            // Create a new Image object to get the real dimensions
            const tempImage = new Image();
            tempImage.src = img.src;
            
            tempImage.onload = () => {
                item.setAttribute("data-pswp-width", tempImage.naturalWidth);
                item.setAttribute("data-pswp-height", tempImage.naturalHeight);
            };
        }

        // Initialize PhotoSwipe with additional options
        const lightbox = new PhotoSwipeLightbox({
            gallery: ".gallery-container",
            children: "a.gallery-item",
            pswpModule: () => PhotoSwipe,
            wheelToZoom: true,
            imageClickAction: 'zoom',
            // Ensure proper sizing
            preload: [1, 2], // Preload one image before and two after
            allowPanToNext: true,
            allowMouseDrag: true,
        });

        lightbox.init();

        // Set dimensions for all gallery items, including hidden ones
        document.querySelectorAll(".gallery-item").forEach(setImageDimensions);

        // Handle dynamically loaded images
        lightbox.on('change', () => {
            const currentIndex = lightbox.pswp.currIndex;
            const items = document.querySelectorAll(".gallery-item");
            
            // Update dimensions for current and adjacent images
            if (items[currentIndex]) setImageDimensions(items[currentIndex]);
            if (items[currentIndex + 1]) setImageDimensions(items[currentIndex + 1]);
            if (items[currentIndex - 1]) setImageDimensions(items[currentIndex - 1]);
        });
    });
</script>
